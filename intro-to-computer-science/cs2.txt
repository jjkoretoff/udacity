notes for lesson 2

procedures - package code to reuse
control - repetition

procedural abstraction - write code once and repeat

procedure takes inputs and produces outputs
  + is an operator but similar in concept
  def<name>(<parameters or inputs>):
      <block or sequence of statemetns>

use a procedure:
<procedure>(<inputs>)

procedure compositon - use the result as input to next

making decisions with comparison operators
<number> <operator> <number>
    output is a boolean of TRUE or FALSE

commands :
    <
    >
    ==
    !=
    <=
    >=

if statements test the block

if <test expression>:
    <block>

also,

if <test exp>:
    <block>
else:
    <block>

** also use elsif

or the "or" operator

example:
    return name[0] == 'D' or name[0] == 'N'


All we have learned to this point is all we need
Alan Turing - Turing machine

arithmetic, comparisons, procedures, if - all you need but other ways to write code are better

LOOPS
  do things over and over
  type:
    while

while<test expression>:
  <block>

if<test expression>:
  <block>

while loops can operate infinitely 
  continuously test while true

Break allows us to stop the loop while the statement is true

while<test expression>:
    <code>
    if<break test>:
        break
    <more code>
<after while>

example:

def print_numbers(n):
    i = 1
    while i <= n:
        print i
        i = i + 1

def print_numbers(n):
    i = 1
    while TRUE:
        if i > n:
            break
        print i
        i = i + 1

multiple assignment
  write code to extract all urls

creating the multiple assignment procdure
  define a procedure 
  can have multiple names on one side of an = and any number of expressions as long as both sides are equal
  ex:
        a, b = 1, 2
        assigns a = 1 and b = 2

page = (contents of a page go here)
start_link = page.find('<a href=')
start_quote = page.find('"', start_link)
end_quote = page.find('"', start_quote + 1)
url = page[start_quote + 1 : end_quote]
print url

def get_next_target(page):
    start_link = page.find('<a href=')
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1 : end_quote]
    return url, end_quote

RESULT OF THIS LESSON

def get_next_target(page):
    start_link = page.find('<a href=')

    if start_link == -1:
        return None, 0
    
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1 : end_quote]
    return url, end_quote

def print_all_links(page):
    while True:
        url, endpos = get_next_target(page)
        if url:
            print url
            page = page[endpos:]
        else:
            break

print_all_links('this <a href="test1">link 1</a> is a <a href="test2">link 2</a> a <a href="test3"link 3</a>')

FINAL w/ get_page

def get_page(url):
    try:
        import urllib
        return urllib.urlopen(url).read()
    except:
        return ""
        
def get_next_target(page):
    start_link = page.find('<a href=')

    if start_link == -1:
        return None, 0
    
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1 : end_quote]
    return url, end_quote

def print_all_links(page):
    while True:
        url, endpos = get_next_target(page)
        if url:
            print url
            page = page[endpos:]
        else:
            break

print_all_links(get_page('https://www.eia.gov/petroleum/supply/weekly/'))
