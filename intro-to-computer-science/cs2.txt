notes for lesson 2

procedures - package code to reuse
control - repetition

procedural abstraction - write code once and repeat

procedure takes inputs and produces outputs
  + is an operator but similar in concept
  def<name>(<parameters or inputs>):
      <block or sequence of statemetns>

use a procedure:
<procedure>(<inputs>)

procedure compositon - use the result as input to next

making decisions with comparison operators
<number> <operator> <number>
    output is a boolean of TRUE or FALSE

commands :
    <
    >
    ==
    !=
    <=
    >=

if statements test the block

if <test expression>:
    <block>

also,

if <test exp>:
    <block>
else:
    <block>

** also use elsif

or the "or" operator

example:
    return name[0] == 'D' or name[0] == 'N'


All we have learned to this point is all we need
Alan Turing - Turing machine

arithmetic, comparisons, procedures, if - all you need but other ways to write code are better

LOOPS
  do things over and over
  type:
    while

while<test expression>:
  <block>

if<test expression>:
  <block>

while loops can operate infinitely 
  continuously test while true

Break allows us to stop the loop while the statement is true

while<test expression>:
    <code>
    if<break test>:
        break
    <more code>
<after while>

example:

def print_numbers(n):
    i = 1
    while i <= n:
        print i
        i = i + 1

def print_numbers(n):
    i = 1
    while TRUE:
        if i > n:
            break
        print i
        i = i + 1

